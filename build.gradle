plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.10'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
}

group = 'com'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    asciidoctorExt
}

repositories {
    mavenCentral()
}

ext {
    restdocVersion = "2.0.6.RELEASE"
    snippetsDir = file('build/generated-snippets')
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // SPRING-SECURITY
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // Java Email
    implementation group: 'javax.mail', name: 'mail', version: '1.4.7'

    //JWT
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    // Amazon S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    implementation 'com.amazonaws:aws-java-sdk-s3'

    // DB
    implementation 'org.testng:testng:7.1.0'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    //스프링 redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Test Coverage
    implementation 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3'

    // REST DOC
    asciidoctorExt "org.springframework.restdocs:spring-restdocs-asciidoctor:${restdocVersion}"
    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc:${restdocVersion}"

    // Logging
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.15.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.15.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.15.0'
    implementation 'org.apache.logging.log4j:log4j-jul:2.15.0'
    implementation 'net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.7.1'
    implementation 'org.reflections:reflections:0.9.10'
    implementation 'com.lmax:disruptor:3.4.2'

    modules {
        module("org.springframework.boot:spring-boot-starter-logging") {
            replacedBy("org.springframework.boot:spring-boot-starter-log4j2", "Use Log4j2 instead of Logback")
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

task copyPrivateModule(type: Copy) {
    copy {
        from './backend-privates'
        include "*.yaml"
        into './src/main/resources'
    }
}

test {
    outputs.dir snippetsDir
    finalizedBy 'jacocoTestReport'
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/MealfitApplication*',
                            '**/*Request*',
                            '**/*Response*',
                            '**/*Dto*',
                            '**/*config*',
                            '**/*Event*',
                            '**/*S3*',
                            '**/email',
//                            'com/mealfit/exception/*',
//                            'com/mealfit/config/*'
                    ])
                })
        )
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

sonarqube {
    properties {
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.java.binaries", "${buildDir}/classes"
        property "sonar.test.inclusions", "**/*Test.java"
        property "sonar.exclusions", "**/resources/static/**, **/test/**"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            enabled = true

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }

            excludes = [
                    '**.*Request*',
                    '**.*Response*',
                    '**.*Dto*',
                    '**.*logging*',
                    '**.*Storage*',
                    '**.*Email',
                    '**.*S3*',
                    '**.*Exception*',
                    '**.*ErrorCode*',
                    '**.*DataSource*',
                    '**.*Config*',
                    '**.*Configuration*',
            ]
        }
        rule {
            element = 'METHOD'
            enabled = true

            excludes = [
                    'equals()',
                    'hashCode()'
            ]
        }
    }
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

task copyDocument(type: Copy) {
    dependsOn bootJar
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

build {
    dependsOn copyDocument
}